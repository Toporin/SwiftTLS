//
//  TLSCipherSuites.swift
//  SwiftTLS
//
//  Created by Nico Schmidt on 31.08.15.
//  Copyright Â© 2015 Nico Schmidt. All rights reserved.
//

public enum CipherSuite : UInt16 {
    
    case TLS_NULL_WITH_NULL_NULL = 0x00
    case TLS_RSA_WITH_NULL_MD5 = 0x01
    case TLS_RSA_WITH_NULL_SHA = 0x02
    case TLS_RSA_WITH_RC4_128_MD5 = 0x04
    case TLS_RSA_WITH_RC4_128_SHA = 0x05
    case TLS_RSA_WITH_3DES_EDE_CBC_SHA = 0x0A
    case TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 0x0D
    case TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 0x10
    case TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 0x13
    case TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 0x16
    case TLS_DH_anon_WITH_RC4_128_MD5 = 0x18
    case TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 0x1B
    case TLS_RSA_WITH_AES_128_CBC_SHA = 0x2F
    case TLS_DH_DSS_WITH_AES_128_CBC_SHA = 0x30
    case TLS_DH_RSA_WITH_AES_128_CBC_SHA = 0x31
    case TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 0x32
    case TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 0x33
    case TLS_DH_anon_WITH_AES_128_CBC_SHA = 0x34
    case TLS_RSA_WITH_AES_256_CBC_SHA = 0x35
    case TLS_DH_DSS_WITH_AES_256_CBC_SHA = 0x36
    case TLS_DH_RSA_WITH_AES_256_CBC_SHA = 0x37
    case TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 0x38
    case TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 0x39
    case TLS_DH_anon_WITH_AES_256_CBC_SHA = 0x3A
    case TLS_RSA_WITH_NULL_SHA256 = 0x3B
    case TLS_RSA_WITH_AES_128_CBC_SHA256 = 0x3C
    case TLS_RSA_WITH_AES_256_CBC_SHA256 = 0x3D
    case TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 0x3E
    case TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 0x3F
    case TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 0x40
    case TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 0x67
    case TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 0x68
    case TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 0x69
    case TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 0x6A
    case TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 0x6B
    case TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 0x6C
    case TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 0x6D
    
    case TLS_RSA_EXPORT_WITH_RC4_40_MD5 = 0x3
    case TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 0x6
    case TLS_RSA_WITH_IDEA_CBC_SHA = 0x7
    case TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = 0x8
    case TLS_RSA_WITH_DES_CBC_SHA = 0x9
    case TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 0xb
    case TLS_DH_DSS_WITH_DES_CBC_SHA = 0xc
    case TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 0xe
    case TLS_DH_RSA_WITH_DES_CBC_SHA = 0xf
    case TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 0x11
    case TLS_DHE_DSS_WITH_DES_CBC_SHA = 0x12
    case TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 0x14
    case TLS_DHE_RSA_WITH_DES_CBC_SHA = 0x15
    case TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = 0x17
    case TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 0x19
    case TLS_DH_anon_WITH_DES_CBC_SHA = 0x1a
    case TLS_KRB5_WITH_DES_CBC_SHA = 0x1e
    case TLS_KRB5_WITH_3DES_EDE_CBC_SHA = 0x1f
    case TLS_KRB5_WITH_RC4_128_SHA = 0x20
    case TLS_KRB5_WITH_IDEA_CBC_SHA = 0x21
    case TLS_KRB5_WITH_DES_CBC_MD5 = 0x22
    case TLS_KRB5_WITH_3DES_EDE_CBC_MD5 = 0x23
    case TLS_KRB5_WITH_RC4_128_MD5 = 0x24
    case TLS_KRB5_WITH_IDEA_CBC_MD5 = 0x25
    case TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA = 0x26
    case TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA = 0x27
    case TLS_KRB5_EXPORT_WITH_RC4_40_SHA = 0x28
    case TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 = 0x29
    case TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5 = 0x2a
    case TLS_KRB5_EXPORT_WITH_RC4_40_MD5 = 0x2b
    case TLS_PSK_WITH_NULL_SHA = 0x2c
    case TLS_DHE_PSK_WITH_NULL_SHA = 0x2d
    case TLS_RSA_PSK_WITH_NULL_SHA = 0x2e
    case TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x41
    case TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x42
    case TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x43
    case TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x44
    case TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x45
    case TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA = 0x46
    case TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x84
    case TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x85
    case TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x86
    case TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x87
    case TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x88
    case TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA = 0x89
    case TLS_PSK_WITH_RC4_128_SHA = 0x8a
    case TLS_PSK_WITH_3DES_EDE_CBC_SHA = 0x8b
    case TLS_PSK_WITH_AES_128_CBC_SHA = 0x8c
    case TLS_PSK_WITH_AES_256_CBC_SHA = 0x8d
    case TLS_DHE_PSK_WITH_RC4_128_SHA = 0x8e
    case TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 0x8f
    case TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 0x90
    case TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 0x91
    case TLS_RSA_PSK_WITH_RC4_128_SHA = 0x92
    case TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 0x93
    case TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 0x94
    case TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 0x95
    case TLS_RSA_WITH_SEED_CBC_SHA = 0x96
    case TLS_DH_DSS_WITH_SEED_CBC_SHA = 0x97
    case TLS_DH_RSA_WITH_SEED_CBC_SHA = 0x98
    case TLS_DHE_DSS_WITH_SEED_CBC_SHA = 0x99
    case TLS_DHE_RSA_WITH_SEED_CBC_SHA = 0x9a
    case TLS_DH_anon_WITH_SEED_CBC_SHA = 0x9b
    case TLS_RSA_WITH_AES_128_GCM_SHA256 = 0x9c
    case TLS_RSA_WITH_AES_256_GCM_SHA384 = 0x9d
    case TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x9e
    case TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x9f
    case TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 0xa0
    case TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 0xa1
    case TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 0xa2
    case TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 0xa3
    case TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 0xa4
    case TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 0xa5
    case TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 0xa6
    case TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 0xa7
    case TLS_PSK_WITH_AES_128_GCM_SHA256 = 0xa8
    case TLS_PSK_WITH_AES_256_GCM_SHA384 = 0xa9
    case TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 0xaa
    case TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 0xab
    case TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 0xac
    case TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 0xad
    case TLS_PSK_WITH_AES_128_CBC_SHA256 = 0xae
    case TLS_PSK_WITH_AES_256_CBC_SHA384 = 0xaf
    case TLS_PSK_WITH_NULL_SHA256 = 0xb0
    case TLS_PSK_WITH_NULL_SHA384 = 0xb1
    case TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 0xb2
    case TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 0xb3
    case TLS_DHE_PSK_WITH_NULL_SHA256 = 0xb4
    case TLS_DHE_PSK_WITH_NULL_SHA384 = 0xb5
    case TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 0xb6
    case TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 0xb7
    case TLS_RSA_PSK_WITH_NULL_SHA256 = 0xb8
    case TLS_RSA_PSK_WITH_NULL_SHA384 = 0xb9
    case TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xba
    case TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0xbb
    case TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xbc
    case TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0xbd
    case TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xbe
    case TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 = 0xbf
    case TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0xc0
    case TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0xc1
    case TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0xc2
    case TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0xc3
    case TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0xc4
    case TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 = 0xc5
    
    case TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 0xff
    
    // TLS 1.3 cipher suites.
    // The key exchange method is no longer part of the cipher suite, so
    // these can't be used for TLS 1.2 and TLS 1.2 cipher suites can't
    // be used for TLS 1.3 either.
    case TLS_AES_128_GCM_SHA256	= 0x1301
    case TLS_AES_256_GCM_SHA384	= 0x1302
    case TLS_CHACHA20_POLY1305_SHA256 = 0x1303
    case TLS_AES_128_CCM_SHA256	= 0x1304
    case TLS_AES_128_CCM_8_SHA256 = 0x1305
    
    
    
    case TLS_FALLBACK_SCSV = 0x5600
    
    case TLS_ECDH_ECDSA_WITH_NULL_SHA = 0xc001
    case TLS_ECDH_ECDSA_WITH_RC4_128_SHA = 0xc002
    case TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = 0xc003
    case TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 0xc004
    case TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 0xc005
    case TLS_ECDHE_ECDSA_WITH_NULL_SHA = 0xc006
    case TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = 0xc007
    case TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 0xc008
    case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0xc009
    case TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0xc00a
    case TLS_ECDH_RSA_WITH_NULL_SHA = 0xc00b
    case TLS_ECDH_RSA_WITH_RC4_128_SHA = 0xc00c
    case TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = 0xc00d
    case TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = 0xc00e
    case TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = 0xc00f
    case TLS_ECDHE_RSA_WITH_NULL_SHA = 0xc010
    case TLS_ECDHE_RSA_WITH_RC4_128_SHA = 0xc011
    case TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 0xc012
    case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0xc013
    case TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0xc014
    case TLS_ECDH_anon_WITH_NULL_SHA = 0xc015
    case TLS_ECDH_anon_WITH_RC4_128_SHA = 0xc016
    case TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = 0xc017
    case TLS_ECDH_anon_WITH_AES_128_CBC_SHA = 0xc018
    case TLS_ECDH_anon_WITH_AES_256_CBC_SHA = 0xc019
    case TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 0xc01a
    case TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 0xc01b
    case TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 0xc01c
    case TLS_SRP_SHA_WITH_AES_128_CBC_SHA = 0xc01d
    case TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 0xc01e
    case TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 0xc01f
    case TLS_SRP_SHA_WITH_AES_256_CBC_SHA = 0xc020
    case TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 0xc021
    case TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 0xc022
    case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 0xc023
    case TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 0xc024
    case TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = 0xc025
    case TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = 0xc026
    case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 0xc027
    case TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0xc028
    case TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = 0xc029
    case TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = 0xc02a
    case TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0xc02b
    case TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0xc02c
    case TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 0xc02d
    case TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 0xc02e
    case TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0xc02f
    case TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0xc030
    case TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 0xc031
    case TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 0xc032
    case TLS_ECDHE_PSK_WITH_RC4_128_SHA = 0xc033
    case TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 0xc034
    case TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = 0xc035
    case TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = 0xc036
    case TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 0xc037
    case TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 0xc038
    case TLS_ECDHE_PSK_WITH_NULL_SHA = 0xc039
    case TLS_ECDHE_PSK_WITH_NULL_SHA256 = 0xc03a
    case TLS_ECDHE_PSK_WITH_NULL_SHA384 = 0xc03b
    case TLS_RSA_WITH_ARIA_128_CBC_SHA256 = 0xc03c
    case TLS_RSA_WITH_ARIA_256_CBC_SHA384 = 0xc03d
    case TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256 = 0xc03e
    case TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384 = 0xc03f
    case TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256 = 0xc040
    case TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384 = 0xc041
    case TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256 = 0xc042
    case TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384 = 0xc043
    case TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 = 0xc044
    case TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 = 0xc045
    case TLS_DH_anon_WITH_ARIA_128_CBC_SHA256 = 0xc046
    case TLS_DH_anon_WITH_ARIA_256_CBC_SHA384 = 0xc047
    case TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 = 0xc048
    case TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 = 0xc049
    case TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 = 0xc04a
    case TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 = 0xc04b
    case TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 = 0xc04c
    case TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 = 0xc04d
    case TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 = 0xc04e
    case TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 = 0xc04f
    case TLS_RSA_WITH_ARIA_128_GCM_SHA256 = 0xc050
    case TLS_RSA_WITH_ARIA_256_GCM_SHA384 = 0xc051
    case TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0xc052
    case TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0xc053
    case TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256 = 0xc054
    case TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384 = 0xc055
    case TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = 0xc056
    case TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = 0xc057
    case TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256 = 0xc058
    case TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384 = 0xc059
    case TLS_DH_anon_WITH_ARIA_128_GCM_SHA256 = 0xc05a
    case TLS_DH_anon_WITH_ARIA_256_GCM_SHA384 = 0xc05b
    case TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0xc05c
    case TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0xc05d
    case TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = 0xc05e
    case TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = 0xc05f
    case TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = 0xc060
    case TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = 0xc061
    case TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = 0xc062
    case TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = 0xc063
    case TLS_PSK_WITH_ARIA_128_CBC_SHA256 = 0xc064
    case TLS_PSK_WITH_ARIA_256_CBC_SHA384 = 0xc065
    case TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 = 0xc066
    case TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 = 0xc067
    case TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 = 0xc068
    case TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 = 0xc069
    case TLS_PSK_WITH_ARIA_128_GCM_SHA256 = 0xc06a
    case TLS_PSK_WITH_ARIA_256_GCM_SHA384 = 0xc06b
    case TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = 0xc06c
    case TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = 0xc06d
    case TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = 0xc06e
    case TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = 0xc06f
    case TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 = 0xc070
    case TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 = 0xc071
    case TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xc072
    case TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xc073
    case TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xc074
    case TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xc075
    case TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xc076
    case TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xc077
    case TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0xc078
    case TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0xc079
    case TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xc07a
    case TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xc07b
    case TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xc07c
    case TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xc07d
    case TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xc07e
    case TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xc07f
    case TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 0xc080
    case TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 0xc081
    case TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 0xc082
    case TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 0xc083
    case TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 = 0xc084
    case TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 = 0xc085
    case TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xc086
    case TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xc087
    case TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xc088
    case TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xc089
    case TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xc08a
    case TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xc08b
    case TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 0xc08c
    case TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 0xc08d
    case TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 0xc08e
    case TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 0xc08f
    case TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 0xc090
    case TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 0xc091
    case TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 0xc092
    case TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 0xc093
    case TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xc094
    case TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xc095
    case TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xc096
    case TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xc097
    case TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xc098
    case TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xc099
    case TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0xc09a
    case TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0xc09b
    case TLS_RSA_WITH_AES_128_CCM = 0xc09c
    case TLS_RSA_WITH_AES_256_CCM = 0xc09d
    case TLS_DHE_RSA_WITH_AES_128_CCM = 0xc09e
    case TLS_DHE_RSA_WITH_AES_256_CCM = 0xc09f
    case TLS_RSA_WITH_AES_128_CCM_8 = 0xc0a0
    case TLS_RSA_WITH_AES_256_CCM_8 = 0xc0a1
    case TLS_DHE_RSA_WITH_AES_128_CCM_8 = 0xc0a2
    case TLS_DHE_RSA_WITH_AES_256_CCM_8 = 0xc0a3
    case TLS_PSK_WITH_AES_128_CCM = 0xc0a4
    case TLS_PSK_WITH_AES_256_CCM = 0xc0a5
    case TLS_DHE_PSK_WITH_AES_128_CCM = 0xc0a6
    case TLS_DHE_PSK_WITH_AES_256_CCM = 0xc0a7
    case TLS_PSK_WITH_AES_128_CCM_8 = 0xc0a8
    case TLS_PSK_WITH_AES_256_CCM_8 = 0xc0a9
    case TLS_PSK_DHE_WITH_AES_128_CCM_8 = 0xc0aa
    case TLS_PSK_DHE_WITH_AES_256_CCM_8 = 0xc0ab
    case TLS_ECDHE_ECDSA_WITH_AES_128_CCM = 0xc0ac
    case TLS_ECDHE_ECDSA_WITH_AES_256_CCM = 0xc0ad
    case TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 0xc0ae
    case TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 0xc0af
    
    // mandatory cipher suite to be TLS compliant as of RFC 2246
    //    case TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
    
    public static var allValues : [CipherSuite] {
        var allValues = [CipherSuite]()
        for i in 0..<0xff {
            if let cipherSuite = CipherSuite(rawValue: UInt16(i)) {
                allValues.append(cipherSuite)
            }
        }
        
        // TLS 1.3 cipher suites
        for i in 0x1300..<0x131f {
            if let cipherSuite = CipherSuite(rawValue: UInt16(i)) {
                allValues.append(cipherSuite)
            }
        }

        for i in 0xc000..<0xc100 {
            if let cipherSuite = CipherSuite(rawValue: UInt16(i)) {
                allValues.append(cipherSuite)
            }
        }

        return allValues
    }
    
    public var descriptor : CipherSuiteDescriptor? {
        return TLSCipherSuiteDescriptorForCipherSuite(self)
    }
    
    func needsServerKeyExchange() -> Bool {
        
        guard let keyExchangeAlgorithm = TLSCipherSuiteDescriptorForCipherSuite(self)?.keyExchangeAlgorithm
        else {
                return false
        }
        
        switch keyExchangeAlgorithm
        {
        case .dhe:
            return true

        case .ecdhe:
            return true

        default:
            return false
        }
    }
    
    public init?(fromString: String)
    {
        for value in CipherSuite.allValues {
            if fromString == "\(value)" {
                self = value
                return
            }
        }
        
        return nil
    }
}
